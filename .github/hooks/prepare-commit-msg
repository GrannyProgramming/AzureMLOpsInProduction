#!/usr/bin/env python3

import os
import subprocess
import json
import requests
import sys

# This hook is invoked by git commit right after preparing the default log message,
# and before the editor is started.

# To enable this hook, rename this file to "prepare-commit-msg" and place it in .git/hooks/
COMMIT_MSG_FILE = sys.argv[1]
COMMIT_MSG_SOURCE = sys.argv[2] if len(sys.argv) > 2 else ""
MAX_CHAR_COUNT = 10000

# Get the diff of staged changes
diff = subprocess.check_output(["git", "diff", "--staged"]).decode("utf-8")

# Get stat of staged changes instead of full diff if diff length is more than 10000 characters
if len(diff) > MAX_CHAR_COUNT:
    diff = subprocess.check_output(["git", "diff", "--staged", "--stat"]).decode("utf-8")

# Set your ChatGPT API endpoint and key
chatgpt_api_endpoint = "https://api.openai.com/v1/completions"
chatgpt_api_key = "bc48932f0ecd4599b980811798707589"

if not chatgpt_api_key:
    raise ValueError("Please set the CHATGPT_API_KEY environment variable.")

# Read user-specified commit message (if any)
user_commit_msg = ""
if COMMIT_MSG_SOURCE == "message":
    with open(COMMIT_MSG_FILE, 'r') as f:
        user_commit_msg = f.read().strip()

prompt = f"Suggest a commit message without any prefix for these changes:\n{diff[:MAX_CHAR_COUNT]}\n"
if user_commit_msg:
    prompt += f"\nThe user has already specified this commit message: {user_commit_msg}\n"

# Call ChatGPT API to suggest a commit message based on the diff and user-specified commit message (if any)
response = requests.post(
    chatgpt_api_endpoint,
    headers={
        "Content-Type": "application/json",
        "Authorization": f"Bearer {chatgpt_api_key}"
    },
    data=json.dumps({
        "prompt": prompt,
        "max_tokens": 50,
        "model": "text-davinci-003",
        "temperature": 0
    })
)

commit_msg = response.json()["choices"][0]["text"]

# Use the suggested commit message as the default commit message
with open(COMMIT_MSG_FILE, 'w') as f:
    f.write(commit_msg)